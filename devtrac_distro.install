<?php
/**
 * @file
 * Install, update and uninstall functions for the devtrac installation profile.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function devtrac_install() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => '1',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => '2',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);
/*
  // Enable some devtrac blocks.
  $default_theme = variable_get('theme_default', 'bartik');
  $admin_theme = 'seven';
  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'search',
      'delta' => 'form',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => -1,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'node',
      'delta' => 'recent',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'dashboard_main',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'navigation',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'sidebar_first',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'powered-by',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'footer',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'login',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 10,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'user',
      'delta' => 'new',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'search',
      'delta' => 'form',
      'theme' => $admin_theme,
      'status' => 1,
      'weight' => -10,
      'region' => 'dashboard_sidebar',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();
*/
  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'article',
      'name' => st('Article'),
      'base' => 'node_content',
      'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Basic page" nodes by default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture support and set the default to a square thumbnail option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);

  // Create a default vocabulary named "Tags", enabled for the 'article' content type.
  $description = st('Use tags to group articles on similar topics into categories.');
  $help = st('Enter a comma-separated list of words to describe your content.');
  $vocabulary = (object) array(
    'name' => st('Tags'),
    'description' => $description,
    'machine_name' => 'tags',
    'help' => $help,

  );
  taxonomy_vocabulary_save($vocabulary);

  $field = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'type' => 'taxonomy_term_reference',
    // Set cardinality to unlimited for tagging.
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => $vocabulary->machine_name,
          'parent' => 0,
        ),
      ),
    ),
  );
  field_create_field($field);

  $instance = array(
    'field_name' => 'field_' . $vocabulary->machine_name,
    'entity_type' => 'node',
    'label' => 'Tags',
    'bundle' => 'article',
    'description' => $vocabulary->help,
    'widget' => array(
      'type' => 'taxonomy_autocomplete',
      'weight' => -4,
    ),
    'display' => array(
      'default' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
      'teaser' => array(
        'type' => 'taxonomy_term_reference_link',
        'weight' => 10,
      ),
    ),
  );
  field_create_instance($instance);

  // Create an image field named "Image", enabled for the 'article' content type.
  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_field/7
  $field = array(
    'field_name' => 'field_image',
    'type' => 'image',
    'cardinality' => 1,
    'locked' => FALSE,
    'indexes' => array('fid' => array('fid')),
    'settings' => array(
      'uri_scheme' => 'public',
      'default_image' => FALSE,
    ),
    'storage' => array(
      'type' => 'field_sql_storage',
      'settings' => array(),
    ),
  );
  field_create_field($field);


  // Many of the following values will be defaulted, they're included here as an illustrative examples.
  // See http://api.drupal.org/api/function/field_create_instance/7
  $instance = array(
    'field_name' => 'field_image',
    'entity_type' => 'node',
    'label' => 'Image',
    'bundle' => 'article',
    'description' => st('Upload an image to go with this article.'),
    'required' => FALSE,
    'settings' => array(
      'file_directory' => 'field/image',
      'file_extensions' => 'png gif jpg jpeg',
      'max_filesize' => '',
      'max_resolution' => '',
      'min_resolution' => '',
      'alt_field' => TRUE,
      'title_field' => '',
    ),
    'widget' => array(
      'type' => 'image_image',
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'weight' => -1,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'large', 'image_link' => ''),
        'weight' => -1,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'type' => 'image',
        'settings' => array('image_style' => 'medium', 'image_link' => 'content'),
        'weight' => -1,
      ),
    ),
  );
  field_create_instance($instance);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval', $filtered_html_permission));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Enable the administration theme.
  $admin_theme = 'shiny';
  theme_enable(array($admin_theme));
  variable_set('admin_theme', $admin_theme);
  variable_set('node_admin_theme', '0');

  // Set the default theme.
  $default_theme = 'devtrac7_theme';
  theme_enable(array($default_theme));
  variable_set('theme_default', $default_theme);
}

/**
 * Implements hook_install_tasks().
 */
function devtrac_install_tasks(&$install_state) {
  if (!variable_get('install_profile', FALSE) && $install_state['database_tables_exist']) {
    $profile = drupal_get_profile();
    if (isset($profile) && !empty($profile)) {
      variable_set('install_profile', $profile);
    }
  }

  // Increase maximum function nesting level to prevent install errors.
  // $max_nesting_level = ini_get('xdebug.max_nesting_level');
  // if ($max_nesting_level > 0 && $max_nesting_level <= '200') {
  //   ini_set('xdebug.max_nesting_level', 200);
  // }

  // Remove any status messages that might have been set. They are unneeded.
  //  drupal_get_messages('status', TRUE);

  $tasks = array();
  $current_task = variable_get('install_task', 'done');

  $statistics_is_piwik = !empty($install_state['parameters']['stats']) && $install_state['parameters']['stats'] == 'piwik';
  $statistics_is_googleanalytics = !empty($install_state['parameters']['stats']) && $install_state['parameters']['stats'] == 'googleanalytics';
  $tasks['devtrac_install_statistics_select_form'] = array(
    'display_name' => st('Enable site statistics'),
    'type' => 'form',
  );
  $tasks['devtrac_install_statistics_config_form'] = array(
    'display_name' => st('Configure site statistics'),
    'type' => 'form',
    'display' => $statistics_is_piwik || $statistics_is_googleanalytics,
    'run' => $statistics_is_piwik || $statistics_is_googleanalytics ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
    'function' => $statistics_is_piwik ? 'devtrac_install_statistics_config_piwik_form' : 'devtrac_install_statistics_config_google_analytics_form',
  );
  $tasks['devtrac_install_additional_modules'] = array(
    'display_name' => st('Install additional functionality'),
    'type' => 'batch',
  );
  $tasks['devtrac_import_codelists'] = array(
    'display_name' => st('Import CodeLists'),
    'type' => 'batch',
  );
  $tasks['devtrac_initialize_taxonomy_access'] = array(
    'display_name' => st('Initialize taxonomy access'),
    'display' => FALSE,
    'type' => 'normal',
  );
  $tasks['devtrac_date_format_form'] = array(
    'display_name' => st('Configure Date Format'),
    'type' => 'form',
  );
  $tasks['devtrac_username_geonames_form'] = array(
    'display_name' => st('Configure Geonames Data'),
    'type' => 'form',
  );
  $tasks['devtrac_enable_custom_currentsearch'] = array(
    'display_name' => st('Enable Custom Current Search Blocks'),
    'type' => 'normal',
  );
  return $tasks;
}

/**
 * Implements hook_install_tasks_alter().
 */
function devtrac_install_tasks_alter(&$tasks, $install_state) {
  // The Solr congiguration screen needs to come after the database
  // setup, enabling the system module and after the full bootstrap.
  $solr_task['devtrac_solr_configure_form'] = array(
    'display_name' => st('Configure Solr search'),
    'type' => 'form',
  );
  $old_tasks = $tasks;
  $tasks = array_slice($old_tasks, 0, 8) + $solr_task + array_slice($old_tasks, 8);
}

/**
 * Task callback: uses Form API.
 */
function devtrac_install_statistics_select_form() {
  drupal_set_title(st('Enable site statistics'));

  $options = array(
    'none' => 'None',
    'piwik' => t('Piwik'),
    'googleanalytics' => t('Google Analytics'),
  );
  $form['module'] = array(
    '#type' => 'radios',
    '#title' => t('Site statistics module to use'),
    '#default_value' => 'none',
    '#options' => $options,
    '#description' => t("The module to use to track your site's usage statistics."),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => st('Continue'),
    '#weight' => 15,
  );
  return $form;
}

/**
 * Implements submit handler for devtrac_install_statistics_select_form.
 */
function devtrac_install_statistics_select_form_submit($form, &$form_state) {
  global $install_state;
  if (isset($form_state['values']['module']) && ($form_state['values']['module'] != 'none')) {
    $install_state['parameters']['stats'] = $form_state['values']['module'];
  }
}

/**
 * Task callback: uses Form API.
 */
function devtrac_install_statistics_config_piwik_form() {
  drupal_set_title(st('Configure Piwik'));

  $form['piwik_info'] = array(
    '#title' => t('Information'),
    '#prefix' => '<div>',
    '#markup' => '<a href="www.piwik.org">Piwik - Web analytics</a> is an open source (GPL license) web analytics software. It gives interesting reports on your website visitors, your popular pages, the search engines keywords they used, the language they speak... and so much more. Piwik aims to be an open source alternative to Google Analytics.<br /><br />Please fill out the general settings. Piwik has many more settings. During this installation the defaults will be used. After the installation you can go to <a href="admin/config/system/piwik">admin/config/system/piwik</a> to change any of these settings.',
    '#suffix' => '</div>',
  );
  $form['piwik_site_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Piwik site ID'),
    '#default_value' => '',
    '#required' => TRUE,
    '#description' => t('The user account number is unique to the websites domain. Click the <strong>Settings</strong> link in your Piwik account, then the <strong>Websites</strong> tab and enter the appropriate site <strong>ID</strong> into this field.'),
  );
  $form['piwik_url_http'] = array(
    '#type' => 'textfield',
    '#title' => t('Piwik HTTP URL'),
    '#default_value' => '',
    '#required' => TRUE,
    '#description' => t('The URL to your Piwik base directory. Example: "http://www.example.com/piwik/".'),
  );
  $form['piwik_url_https'] = array(
    '#type' => 'textfield',
    '#title' => t('Piwik HTTPS URL'),
    '#default_value' => '',
    '#description' => t('The URL to your Piwik base directory with SSL certificate installed. Required if you track a SSL enabled website. Example: "https://www.example.com/piwik/".'),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => st('Continue'),
    '#weight' => 15,
  );
  return $form;
}

/**
 * Implements submit handler for devtrac_install_statistics_config_piwik_form.
 */
function devtrac_install_statistics_config_piwik_form_submit($form, &$form_state) {
  global $install_state;
  $install_state['statistics']['piwik']['piwik_site_id'] = $form_state['values']['piwik_site_id'];
  variable_set('piwik_site_id', $form_state['values']['piwik_site_id']);
  $install_state['statistics']['piwik']['piwik_url_http'] = $form_state['values']['piwik_url_http'];
  variable_set('piwik_url_http', $form_state['values']['piwik_url_http']);
  if (isset($form_state['values']['piwik_url_https'])) {
    $install_state['statistics']['piwik']['piwik_url_https'] = $form_state['values']['piwik_url_https'];
    variable_set('piwik_url_https', $form_state['values']['piwik_url_https']);
  }
}

/**
 * Task callback: uses Form API.
 */
function devtrac_install_statistics_config_google_analytics_form() {
  drupal_set_title(st('Configure Google Analytics'));

  $form['googleanalytics_info'] = array(
    '#title' => t('Information'),
    '#prefix' => '<div>',
    '#markup' => '<a href="www.google.com/analytics">Google Analytics</a> is a free (registration required) website traffic and marketing effectiveness service.<br /><br />Please fill out the general settings. Google Analytics has many more settings. During this installation the defaults will be used. After the installation you can go to <a href="admin/config/system/googleanalytics">admin/config/system/googleanalytics</a> to change any of these settings.',
    '#suffix' => '</div>',
  );
  $form['googleanalytics_account'] = array(
    '#type' => 'textfield',
    '#title' => t('Web Property ID'),
    '#default_value' => 'UA-',
    '#required' => TRUE,
    '#description' => t('This ID is unique to each site you want to track separately, and is in the form of UA-xxxxxxx-yy. To get a Web Property ID, <a href="www.google.com/analytics">register your site with Google Analytics</a>, or if you already have registered your site, go to your Google Analytics Settings page to see the ID next to every site profile. <a href="https://developers.google.com/analytics/resources/concepts/gaConceptsAccounts#webProperty">Find more information in the documentation</a>.'),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => st('Continue'),
    '#weight' => 15,
  );
  return $form;
}

/**
 * Implements submit handler for devtrac_install_statistics_config_google_analytics_form.
 */
function devtrac_install_statistics_config_google_analytics_form_submit($form, &$form_state) {
  global $install_state;
  $install_state['statistics']['googleanalytics']['googleanalytics_account'] = $form_state['values']['googleanalytics_account'];
  variable_set('googleanalytics_account', $form_state['values']['googleanalytics_account']);
}

/**
 * Task callback: uses Batch API to import modules based on user selection.
 * Installs a site statistics module if requested, or any modules providing
 * additional functionality to the base install.
 */
function devtrac_install_additional_modules(&$install_state) {
  $modules = array(
    'devtrac7_profile_menu',
    'devtrac7_field_permissions_feature',
  );
  if (isset($install_state['parameters']['stats'])) {
    $modules[] = $install_state['parameters']['stats'];
  }
  
  // Resolve the dependencies now, so that module_enable() doesn't need
  // to do it later for each individual module (which kills performance).
  $files = system_rebuild_module_data();
  $modules_sorted = array();
  foreach ($modules as $module) {
    if ($files[$module]->requires) {
      // Create a list of dependencies that haven't been installed yet.
      $dependencies = array_keys($files[$module]->requires);
      $dependencies = array_filter($dependencies, '_devtrac_filter_dependencies');
      // Add them to the module list.
      $modules = array_merge($modules, $dependencies);
    }
  }
  $modules = array_unique($modules);
  foreach ($modules as $module) {
    $modules_sorted[$module] = $files[$module]->sort;
  }
  arsort($modules_sorted);

  $operations = array();
  // Enable and set as default the correct theme.
  $theme = 'devtrac7_theme';
  $operations[] = array('_devtrac_enable_theme', array($theme));
  // Enable the selected modules.
  foreach ($modules_sorted as $module => $weight) {
    $operations[] = array('_devtrac_enable_module', array($module, $files[$module]->info['name']));
  }
  $operations[] = array('_devtrac_flush_caches', array(t('Flushed caches.')));

  $batch = array(
    'operations' => $operations,
    'file' => drupal_get_path('profile', 'devtrac') . '/devtrac.install_callbacks.inc',
  );

  return $batch;
}

/**
 * Import codelists using module devtrac_imports.
 */
function devtrac_import_codelists() {
  $batch = devtrac_imports_batch();
  // Remove any status messages that might have been set.
  drupal_get_messages('status', TRUE);
  return $batch;
}

/**
 * Initialize taxonomy access settings.
 */
function devtrac_initialize_taxonomy_access() {
  // Initialize some default settings.
  $deny = array(
    'view' => 0,
    'update' => 0,
    'delete' => 0,
    'create' => 0,
    'list' => 0,
  );
  $list = array(
    'view' => 0,
    'update' => 0,
    'delete' => 0,
    'create' => 0,
    'list' => 1,
  );
  $view_and_list = array(
    'view' => 1,
    'update' => 0,
    'delete' => 0,
    'create' => 0,
    'list' => 1,
  );
  $create_and_list = array(
    'view' => 0,
    'update' => 0,
    'delete' => 0,
    'create' => 1,
    'list' => 1,
  );

  // Get the array of all role names, indexed by rid.
  $roles = _taxonomy_access_user_roles();
  // Get the array of all vocabulary objects, indexed by vid.
  $vocabularies = taxonomy_get_vocabularies();

  // Initialize global settings for different roles.
  foreach ($roles as $rid => $role_name) {
    switch ($role_name) {
      case 'anonymous user':
        $anonymous_global_defaults[0] = _taxonomy_access_format_grant_record(0, $rid, $view_and_list, TRUE);
        break;
      case 'authenticated user':
        $authenticated_global_defaults[0] = _taxonomy_access_format_grant_record(0, $rid, $view_and_list, TRUE);
        break;
      case 'editor':
        $editor_global_defaults[0] = _taxonomy_access_format_grant_record(0, $rid, $list, TRUE);
        break;
      case 'field worker':
        $worker_global_defaults[0] = _taxonomy_access_format_grant_record(0, $rid, $list, TRUE);
        break;
      default:
    }
  }

  // Initialize vocabulary settings for different roles.
  foreach ($roles as $rid => $role_name) {
    foreach ($vocabularies as $vid => $vocabulary) {
      switch ($role_name) {
        case 'anonymous user':
          $anonymous_vocabulary_defaults[$vid] = _taxonomy_access_format_grant_record($vid, $rid, $list, TRUE);
          break;
        case 'authenticated user':
          $authenticated_vocabulary_defaults[$vid] = _taxonomy_access_format_grant_record($vid, $rid, $deny, TRUE);
          break;
        case 'editor':
          $editor_vocabulary_defaults[$vid] = _taxonomy_access_format_grant_record($vid, $rid, $create_and_list, TRUE);
          break;
        case 'field worker':
          $worker_vocabulary_defaults[$vid] = _taxonomy_access_format_grant_record($vid, $rid, $create_and_list, TRUE);
          break;
        default:
      }
    }
  }

  // Initialize term settings for different roles.
  foreach ($roles as $rid => $role_name) {
    foreach ($vocabularies as $vid => $vocabulary) {
      $terms = taxonomy_get_tree($vid, 0, NULL, TRUE);
      foreach ($terms as $term) {
        switch ($role_name) {
          case 'editor':
            $children = taxonomy_get_children($term->tid);
            if (empty($children)) {
              // $editor_term_defaults[$term->tid] = _taxonomy_access_format_grant_record($term->tid, $rid, $create_and_list);
            }
            else {
              $editor_term_defaults[$term->tid] = _taxonomy_access_format_grant_record($term->tid, $rid, $list);
            }
            break;
          case 'field worker':
            $children = taxonomy_get_children($term->tid);
            if (empty($children)) {
              // $worker_term_defaults[$term->tid] = _taxonomy_access_format_grant_record($term->tid, $rid, $create_and_list);
            }
            else {
              $worker_term_defaults[$term->tid] = _taxonomy_access_format_grant_record($term->tid, $rid, $list);
            }
            break;
          default:
        }
      }
    }
  }

  // Process global default grants.
  if (!empty($anonymous_global_defaults)) {
    taxonomy_access_set_default_grants($anonymous_global_defaults);
  }
  if (!empty($authenticated_global_defaults)) {
    taxonomy_access_set_default_grants($authenticated_global_defaults);
  }
  if (!empty($editor_global_defaults)) {
    taxonomy_access_set_default_grants($editor_global_defaults);
  }
  if (!empty($worker_global_defaults)) {
    taxonomy_access_set_default_grants($worker_global_defaults);
  }

  // Process vocabulary default grants.
  if (!empty($anonymous_vocabulary_defaults)) {
    taxonomy_access_set_default_grants($anonymous_vocabulary_defaults);
  }
  if (!empty($authenticated_vocabulary_defaults)) {
    taxonomy_access_set_default_grants($authenticated_vocabulary_defaults);
  }
  if (!empty($editor_vocabulary_defaults)) {
    taxonomy_access_set_default_grants($editor_vocabulary_defaults);
  }
  if (!empty($worker_vocabulary_defaults)) {
    taxonomy_access_set_default_grants($worker_vocabulary_defaults);
  }

  // Process term grants.
  if (!empty($editor_term_defaults)) {
    taxonomy_access_set_term_grants($editor_term_defaults);
  }
  if (!empty($worker_term_defaults)) {
    taxonomy_access_set_term_grants($worker_term_defaults);
  }
}

/**
 * array_filter() callback used to filter out already installed dependencies.
 */
function _devtrac_filter_dependencies($dependency) {
  return !module_exists($dependency);
}

/**
 * Inplements devtrac_solr_configure_form()
 */
function devtrac_solr_configure_form() {
  drupal_set_title(st('Configure Solr Settings'));

  $form['solr'] = array(
    '#type' => 'fieldset',
    '#title' => st('Solr Settings'),
  );
  $form['solr']['host'] = array(
    '#type' => 'textfield',
    '#title' => t('Host'),
    '#default_value' => 'solro2.mountbatten.net',
    '#maxlength' => 64,
    '#description' => t('Add hostname or IP address of ur solr server', array('@overview' => url('admin/structure/block'))),
    '#required' => FALSE,
    '#weight' => -20,
  );
  $form['solr']['port'] = array(
    '#type' => 'textfield',
    '#title' => t('Port'),
    '#default_value' => '8080',
    '#maxlength' => 64,
    '#description' => t('Port Number'),
    '#required' => FALSE,
    '#weight' => -19,
  );
  $form['solr']['path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path'),
    '#default_value' => '/solr4/devtracd7',
    '#maxlength' => 64,
    '#description' => t('Path to your solr Instance', array('@overview' => url('admin/structure/block'))),
    '#required' => FALSE,
    '#weight' => -18,
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => st('Create and Continue'),
    '#weight' => 15,
  );
  return $form;
}

function devtrac_solr_configure_form_submit($form, &$form_state) {
  global $databases, $drupal_hash_salt;

  $settings = array();
  $settings['databases'] = array(
    'value' => $databases,
  );
  $settings['drupal_hash_salt'] = array(
    'value' => $drupal_hash_salt,
  );

  $settings["conf['search_api_override_mode']"] = array(
    'value' => 'load',
    'required' => TRUE,
  );
  $settings["conf['search_api_override_servers']"] = array(
    'value' => array(
      'devtrac_solr_server' => array(
        'name' => 'Devtrac Solr Server (Overridden)',
        'options' => array(
          'host' => $form_state['values']['host'],
          'port' => $form_state['values']['port'],
          'path' => $form_state['values']['path'],
          'http_user' => '',
          'http_pass' => '',
          'excerpt' => 0,
          'retrieve_data' => 0,
          'highlight_data' => 0,
          'http_method' => 'POST',
        ),
      ),
    ),
    'required' => TRUE,
  );

  //Do the actual write to settings.php.
  drupal_rewrite_settings($settings);
}

function devtrac_date_format_form() {
  module_load_include('inc', 'system', 'system.admin');
  $date_time_settings = system_date_time_settings();
  // Remove any status messages that might have been set.
  drupal_get_messages('status', TRUE);
  return $date_time_settings;
}

/**
 * Iplements hook_username_geonames_form()
 */
function devtrac_username_geonames_form() {
  drupal_set_title(st('Configure Geonames Username'));

  $form['geo_usr_name'] = array(
    '#type' => 'fieldset',
    '#title' => st('Geonames Settings'),
  );

  $form['geo_usr_name']['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Registered Username'),
    '#maxlength' => 64,
    '#description' => t('<a href="http://www.geonames.org/login">The username</a> for your application can be registered here.
      You will then receive an email with a confirmation link and after you have confirmed the email you can enable your account
      for the webservice on your account page'),
    '#required' => FALSE,
    '#default_value' => 'devtrac',
    '#weight' => -18,
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => st('Create and Continue'),
    '#weight' => 15,
  );
  return $form;
}

/**
 * Implements username_geonames_form_submit()
 */
function devtrac_username_geonames_form_submit($form, &$form_state) {
  variable_set('geonames_username',$form_state['values']['username']);
}

/**
 * Enables custom current search blocks. Unfortunately in code
 */
function devtrac_enable_custom_currentsearch() {
  // One day, far far away, we will be able to remove this code, as we will have fixed the
  // cause of this issue https://drupal.org/node/1469002
  $block_searcher = array(
    'devtrac7_actionitems_standard' => 'search_api@devtrac_solr_action_items_index',
    'devtrac7_actionitem_activefacets' => 'search_api@devtrac_solr_action_items_index',
    'devtrac7_activities_activefacets' => 'search_api@devtrac_solr_activity_index',
    'devtrac7_activities_standard' => 'search_api@devtrac_solr_activity_index',
    'devtrac7_answers_activefacets' => 'search_api@answers',
    'devtrac7_answers_mainpage' => 'search_api@answers',
    'devtrac7_answers_standard' => 'search_api@answers',
    'devtrac7_districts_activefacets' => 'search_api@devtrac_solr_district_index',
    'devtrac7_districts_standard' => 'search_api@devtrac_solr_district_index',
    'devtrac7_fieldtrips_activefacets' => 'search_api@devtrac_solr_field_trip_index',
    'devtrac7_fieldtrips_standard' => 'search_api@devtrac_solr_field_trip_index',
    'devtrac7_images_activefacets' => 'search_api@devtrac_solr_image_index',
    'devtrac7_images_standard' => 'search_api@devtrac_solr_image_index',
    'devtrac7_locations_activefacets' => 'search_api@devtrac_solr_locations_index',
    'devtrac7_locations_standard' => 'search_api@devtrac_solr_locations_index',
    'devtrac7_organisations_standard' => 'search_api@devtrac_solr_organisation_index',
    'devtrac7_organisati_activefacets' => 'search_api@devtrac_solr_organisation_index',
    'devtrac7_questions_activefacets' => 'search_api@questions',
    'devtrac7_questions_standard' => 'search_api@questions',
    'devtrac7_sitevisits_activefacets' => 'search_api@devtrac_solr_site_visits_index',
    'devtrac7_sitevisits_standard' => 'search_api@devtrac_solr_site_visits_index',
    'devtrac7_users_activefacets' => 'search_api@devtrac7_user_index',
    'devtrac7_users_standard' => 'search_api@devtrac7_user_index',
  );
  foreach ($block_searcher as $block => $searcher) {
    current_search_set_block_searcher($block, $searcher);
  }
}
