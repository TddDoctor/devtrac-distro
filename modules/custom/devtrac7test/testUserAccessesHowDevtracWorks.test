 
<?php
/**
* @file
* Test Devtrac project. public  access information 
**/

module_load_include('test', 'simpletest_clone');

 class CustomTestCase extends SimpleTestCloneTestCase {
   public static function getInfo() {
    return array(
      'name' => 'About devtrac7 test',
      'description' => t('Anonymous users reads about devtrac.'),
      'group' => 'Devtrac',
    );
  }
  /**
   * (non-PHPdoc)
   * @see SimpleTestCloneTestCase::setUp()
   *
   * 1. Create a new User with all permissions of role "Unicef" (rid = 5).
   * 2. Log the user into the system.
   */
  /**
   * Log in a user with the internal browser.
   *
   * If a user is already logged in, then the current user is logged out before
   * logging in the specified user.
   *
   * Please note that neither the global $user nor the passed in user object is
   * populated with data of the logged in user. If you need full access to the
   * user object after logging in, it must be updated manually. If you also need
   * access to the plain-text password of the user (set by drupalCreateUser()),
   * e.g. to login the same user again, then it must be re-assigned manually.
   * For example:
   * @code
   *   // Create a user.
   *   $account = $this->drupalCreateUser(array());
   *   $this->drupalLogin($account);
   *   // Load real user object.
   *   $pass_raw = $account->pass_raw;
   *   $account = user_load($account->uid);
   *   $account->pass_raw = $pass_raw;
   * @endcode
   *
   * @param $user
   *   User object representing the user to login.
   *
   * @see drupalCreateUser()
   */
  protected function drupalLogin(stdClass $user) {
  	if ($this->loggedInUser) {
  		$this->drupalLogout();
  	}
  
  	$edit = array(
  			'name' => $user->name,
  			'pass' => $user->pass_raw
  	);
  	$this->drupalPost('user/login', $edit, t('Log in'));
  
  	// If a "log out" link appears on the page, it is almost certainly because
  	// the login was successful.
  	$pass = $this->assertLink(t('Sign out'), 0, t('User name successfully logged in.', array('%name' => $edit['name'])), 'User login');
  
  	if ($pass) {
  		$this->loggedInUser = $user;
  	}
  }

  public function setUp() {
  	parent::setUp('devtrac7test');
  }
     /**
      * project partners and licence version of devtrac links are available and active
      * 
      * 
      * 
      */
 
  public function testUserReadsCreativeCommon() {
    $this->drupalGet('contact');
    $this->assertNoText('Creative Commons Attribution-ShareAlike3.0 Unported License', 'Creative commons description text not found', 'DevTrac');
    $this->assertLink('Creative Commons Attribution-ShareAlike 3.0 Unported License', 0 ,'Link to Attribution-ShareAlike 3.0');
    $this->assertText('This work is licensed under a', t('DevTrac working license is showing'), 'DevTrac');
    $this->assertLink('Unicef Uganda', 0, t('Unicef Uganda link label is showing'));
    $this->assertLink('Mountbatten Ltd', 0, t('Mountbatten Ltd link label is showing'));
     
  }
  
  /**
   * Checking the availability of name field on the contact page.
   * 
   * 
   */
  
  public function testcontactfieldaccesstests() {
    $this->drupalGet('contact');
    $this->assertField(t('name'), 'Field name does exist', 'DevTrac');
    $this->assertText(t('Your name'), 'Field lable is showing', 'DevTrac');
    $this->assertText(t('Contact'), 'Contact label is showing ', 'DevTrac'); 
  }
  
  /**
   * testing the availability of subject field on the contact page
   * 
   */
  
  public function testcontactfieldSubjectAccesstest() {
    $this->drupalGet('contact');
    $this->assertField(t('subject'), t('Field subject does exist'), 'DevTrac');
    $this->assertText(t('Subject '), t('Field lable is showing'), 'DevTrac');
    $this->assertText(t('Contact'), t('Contact label is showing '), 'DevTrac');
        
 
  }
  //
  /**
   * checking the e-mail field on the contact devtrac page
   * 
   * 
   */
  
  
    public function testcontactfieldMailAccesstest() {
      $this->drupalGet('contact'); 
      $this->assertField(t('mail'), t('Field mail does exist'), 'DevTrac');
      $this->assertText(t('Your e-mail address'), t('Field lable is showing'), 'DevTrac');
      $this->assertText(t('Contact'), t('Contact label is showing '), 'DevTrac');
      
  }
//
/**
 * Checking the availability of message field on the contact devtrac page
 * 
 * 
 */
  public function testcontactfieldMessageAccesstest() {
    $this->drupalGet('contact');
    $this->assertField(t('message'), t('Field mail does exist'), 'DevTrac');
    $this->assertText(t('Message '), t('Field lable is showing'), 'DevTrac');
    $this->assertText(t('Contact'), t('Contact label is showing '), 'DevTrac'); 
  }
//
/**
 * testing the availability of 'About devtrac' page
 * 
 * 
 */

  public function testUserAccessAboutUsePage() {
    $this->drupalGet('node/47');
    $this->assertText(t('About Devtrac'), t('About us page is found'), 'DevTrac');
     //$this->assertTitle(t(''), t(''), 'DevTrac7');
    $this->assertLink(t('DevTrac Help Pages'), 0 ,t('Link to FAQS'));
    }
    /**
     * confirming the availability of 'devtrac Help Page'
     * 
     * 
     */
  public function testUserAccessFAQS() {
    $this->drupalGet('node/137');
    //$this->assertLink(t('CONTACT US'), 0 ,t('Link to ABOUT devtrac7 page'));
    $this->assertText(t('DevTrac Help Pages'), t('About us page is found'), 'DevTrac');
    
  }
  
 }


class AnonymousUserContactdevtrac extends SimpleTestCloneTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Devtrac7 how it works',
      'description' => t('Anonymous user contacts devtrac.'),
      'group' => 'Devtrac',
    );
  }  
  /**
   * (non-PHPdoc)
   * @see SimpleTestCloneTestCase::setUp()
   *
   * 1. Create a new User with all permissions of role "Unicef" (rid = 5).
   * 2. Log the user into the system.
   */
  /**
   * Log in a user with the internal browser.
   *
   * If a user is already logged in, then the current user is logged out before
   * logging in the specified user.
   *
   * Please note that neither the global $user nor the passed in user object is
   * populated with data of the logged in user. If you need full access to the
   * user object after logging in, it must be updated manually. If you also need
   * access to the plain-text password of the user (set by drupalCreateUser()),
   * e.g. to login the same user again, then it must be re-assigned manually.
   * For example:
   * @code
   *   // Create a user.
   *   $account = $this->drupalCreateUser(array());
   *   $this->drupalLogin($account);
   *   // Load real user object.
   *   $pass_raw = $account->pass_raw;
   *   $account = user_load($account->uid);
   *   $account->pass_raw = $pass_raw;
   * @endcode
   *
   * @param $user
   *   User object representing the user to login.
   *
   * @see drupalCreateUser()
   */
  protected function drupalLogin(stdClass $user) {
  	if ($this->loggedInUser) {
  		$this->drupalLogout();
  	}
  
  	$edit = array(
  			'name' => $user->name,
  			'pass' => $user->pass_raw
  	);
  	$this->drupalPost('user/login', $edit, t('Log in'));
  
  	// If a "log out" link appears on the page, it is almost certainly because
  	// the login was successful.
  	$pass = $this->assertLink(t('Sign out'), 0, t('User name successfully logged in.', array('%name' => $edit['name'])), t('User login'));
  
  	if ($pass) {
  		$this->loggedInUser = $user;
  	}
  }
  
  public function setUp() {
  	parent::setUp('devtrac7test');
  	
  }
  
 /**
  * anonymous user sends a empty message to the devtrac team //after reading through FAQS
  * 
  */
 
 public function testAnonymousUserContactsDevtractest() {
   $this->drupalGet('content/devtrac-help-pages');
   $this->clickLink('Contact Us', 0, 'contact us link clicked');
   $contac1['name'] = '';
   $contac1['subject'] = '';
   $contac1['mail'] = '';
   $contac1['message'] = '';
   $this->drupalPost('contact', $contac1, 'Send message');
   $this->assertText('Your e-mail address field is required', 'Your e-mail address field is required', 'DevTrac');    
   //$this->assertLink(t('Contact Us'), 0 ,t('Link to site reports found'));
   $this->assertText('Your name field is required.', 'Your name field is required.'); 
   $this->assertNoText('Your message has been sent.', 'Message is successifuly sent', 'DevTrac');  
   $this->assertText('Message field is required', 'Message field is required', 'Devtrac');
 }
 /**
  * ensures that all links are available and accessible.
  * 
  * 
  */
 public function testAboutDevtracAccesstest() {
   $this->drupalGet('node/47');
   $this->assertText('DevTrac is a Ugandan initiative led by a consortium of government and donor agencies: including the GEO-IS Working group,', 'Anonymous user reads about devtrac project profile', 'DevTrac'); 
   $this->assertLink('Contact Us', 0 ,'Link to site reports found');
   $this->assertLink('FAQs', 0 ,'Link to FAQs found'); 
   $this->assertLink('sblaschke@unicef.org', 0 ,'Link to email sblaschke@unicef.org is found');
   $this->assertTitle('About Devtrac | DevTrac', 'About devtrac page title is found', 'Devtrac');
 }
 
 
 public function testAnonymousUserContactsDevtrac() {
 	$this->drupalGet('content/devtrac-help-pages');
 	$this->clickLink('Contact Us', 0, 'contact us link clicked');
 	$name = 'mayambala';
 	$subject = 'how to join devtrac7';
 	$email = 'osmanbuyondo@yahoo.com';
 	$mess = 'i have tried devtrac7 and of late have picked some interest, how can i be part of it?';
 	$contac['name'] = $name;
 	$contac['subject'] = $subject;
 	$contac['mail'] = $email;
 	$contac['message'] = $mess;
 	$this->assertNoText('DevTrac is a Ugandan initiative', 'About us page is found', 'DevTrac7');
 	$this->assertLink('Home', 0 ,'Link to Home devtrac7 page');
 	$this->drupalPost('contact', $contac, 'Send message');
 	$this->assertText('Your message has been sent.', 'Message is successifuly sent', 'DevTrac');
 }
 
 
 }
 
 
 
 
 

