 
<?php
/**
* @file
* Testing the behaviors of an authenticated user editing about devtrac.
**/

module_load_include('test', 'simpletest_clone');


class AuthenticatedUserEditAboutDEvtracTestCase extends SimpleTestCloneTestCase {
  protected $admin_user;
  public static function getInfo() {
    return array(
      'name' => 'Devtrac profile edit test1',
      'description' => t('DevTrac Authenticated User Edits the devtrac profile(About page)'),
      'group' => 'Devtrac',
    );
  } 
  //
  
  /**
   * (non-PHPdoc)
   * @see SimpleTestCloneTestCase::setUp()
   *
   * 1. Create a new User with all permissions of role "Unicef" (rid = 5).
   * 2. Log the user into the system.
   */
  /**
   * Log in a user with the internal browser.
   *
   * If a user is already logged in, then the current user is logged out before
   * logging in the specified user.
   *
   * Please note that neither the global $user nor the passed in user object is
   * populated with data of the logged in user. If you need full access to the
   * user object after logging in, it must be updated manually. If you also need
   * access to the plain-text password of the user (set by drupalCreateUser()),
   * e.g. to login the same user again, then it must be re-assigned manually.
   * For example:
   * @code
   *   // Create a user.
   *   $account = $this->drupalCreateUser(array());
   *   $this->drupalLogin($account);
   *   // Load real user object.
   *   $pass_raw = $account->pass_raw;
   *   $account = user_load($account->uid);
   *   $account->pass_raw = $pass_raw;
   * @endcode
   *
   * @param $user
   *   User object representing the user to login.
   *
   * @see drupalCreateUser()
   */
  protected function drupalLogin(stdClass $user) {
  	if ($this->loggedInUser) {
  		$this->drupalLogout();
  	}
  
  	$edit = array(
  			'name' => $user->name,
  			'pass' => $user->pass_raw
  	);
  	$this->drupalPost('user', $edit, t('Log in'));
  
  	// If a "log out" link appears on the page, it is almost certainly because
  	// the login was successful.
  	$pass = $this->assertLink(t('Sign out'), 0, t('User %name successfully logged in.', array('%name' => $edit['name'])), t('User login'));
  
  	if ($pass) {
  		$this->loggedInUser = $user;
  	}
  }
  /**
   *
   *creating an admin who is to cerate an authenticated user to create a fieldtrip later on
   *
   */

	public function setUp() {
		parent::setUp();
		$this->admin_user = $this->drupalCreateUser(array('administer users', 'administer permissions', 'access user profiles', 'administer site configuration', 'administer modules', 'create taxonomy_vocabulary_6', 'create taxonomy_vocabulary_8'));

		$this->drupalLogin($this->admin_user);
		$this->assertNoText(t('Overview'), t('User is successifuly logged in'), 'Devtrac');
		//
		$this->drupalPost('user/' . $this->admin_user->uid . '/edit', array("roles[3]" => 3, 'field_user_firstname[und][0][value]' => 'firstname', 'field_user_surname[und][0][value]' => 'lname', 'field_user_aboutme[und][0][value]' => 'aboutjan', 'name' =>'tester', 'taxonomy_vocabulary_4[und]' =>26, 'taxonomy_vocabulary_5[und]'=>30, 'field_user_superior[und][0][target_id]' => 'Jan van Diepen (3)'), t('Save'));

}


   public function testAboutDevtracTitleFieldExisttest() {
     $this->drupalGet('node/47/edit');
     $this->assertField('title', t('Field title does exist'), 'DevTrac');
     $this->assertText(t('Title'), t('Title label is showing'), 'DevTrac');
     $this->assertText(t('Edit Page About Devtrac'), t('Edit Page About Devtrac text exists'), 'DevTrac');

}
 
   public function testAboutDevtracEditSumaryFieldExisttest() {
   	
     $this->drupalGet('node/47/edit');
     $this->assertField('edit-body-und-0-summary', t('Field edit sumary does exist'), 'DevTrac');
     $this->assertText(t('Summary'), t('Summary label is showing'), 'DevTrac');
     $this->assertText(t('Edit Page About Devtrac'), t('Edit Page About Devtrac text exists'), 'DevTrac');
     $this->assertNoLink(t('Hide summary'), 0 ,t('Link to Hide summary found')); 
 }
 //
 
  public function testAboutDevtracEditBodyFieldExisttest() {
  	$this->drupalGet('node/47/edit');
    $this->assertField('body[und][0][value]', t('Field body does exist'), 'DevTrac');
    $this->assertText(t('Summary'), t('Summary label is showing'), 'DevTrac');
    $this->assertText(t('Edit Page About Devtrac'), t('Edit Page About Devtrac text exists'), 'DevTrac');
    $this->assertNoLink(t('Hide summary'), 0 ,t('Link to Hide summary found'));
    
 }
 
 }
 
 /**
   * However, authenticated users who are not administers can not access About devtrac edit page!
   * create an admin  and login so as he can edit the about devtrac edit page.
   * 
   *
   */
 
class AuthenticatedUserEditSuccessTestCase extends SimpleTestCloneTestCase {
  protected $unicef_user;
  public static function getInfo() {
  return array(
    'name' => 'Devtrac profile edit test',
    'description' => t('DevTrac Authenticated User Edits the devtrac profile(About page successifuly)'),
      'group' => 'Devtrac',
    );
  }  

  /**
   * Log in a user with the internal browser.
   *
   * If a user is already logged in, then the current user is logged out before
   * logging in the specified user.
   *
   * Please note that neither the global $user nor the passed in user object is
   * populated with data of the logged in user. If you need full access to the
   * user object after logging in, it must be updated manually. If you also need
   * access to the plain-text password of the user (set by drupalCreateUser()),
   * e.g. to login the same user again, then it must be re-assigned manually.
   * For example:
   * @code
   *   // Create a user.
   *   $account = $this->drupalCreateUser(array());
   *   $this->drupalLogin($account);
   *   // Load real user object.
   *   $pass_raw = $account->pass_raw;
   *   $account = user_load($account->uid);
   *   $account->pass_raw = $pass_raw;
   * @endcode
   *
   * @param $user
   *   User object representing the user to login.
   *
   * @see drupalCreateUser()
   */
  protected function drupalLogin(stdClass $user) {
  	if ($this->loggedInUser) {
  		$this->drupalLogout();
  	}
  
  	$edit = array(
  			'name' => $user->name,
  			'pass' => $user->pass_raw,
  	);
  	$this->drupalPost('user', $edit, t('Log in'));
  
  	// If a "log out" link appears on the page, it is almost certainly because
  	// the login was successful.
  	$pass = $this->assertLink(t('Sign out'), 0, t('User %name successfully logged in.', array('%name' => $edit['name'])), t('User login'));
  
  	if ($pass) {
  		$this->loggedInUser = $user;
  	}
  }
  
 public function setUp() {
   parent::setUp();
   $this->unicef_user = $this->drupalCreateUser(array('administer users', 'administer permissions', 'access user profiles', 'administer site configuration', 'administer modules', 'create taxonomy_vocabulary_6', 'create taxonomy_vocabulary_8'));    //$this->authenticated_user = $this->drupalCreateUser(array('create field_fieldtrip_user', 'edit field_fieldtrip_user'));
    $this->drupalLogin($this->unicef_user);
    $this->assertNoText(t('Overview'), t('User is successifuly logged in'), 'Devtrac');
    //$this->drupalPost('user/' . $this->unicef_user->uid . '/edit', array("roles[5]" => 5, 'taxonomy_vocabulary_5[und]' => 30, 'taxonomy_vocabulary_4[und]' => 26, 'field_user_firstname[und][0][value]' => 'firstname', 'field_user_surname[und][0][value]' => 'lname', 'field_user_aboutme[und][0][value]' => 'aboutjan', 'name' =>'tester', 'field_user_superior[und][0][target_id]' => 'Jan van Diepen (3)'), t('Save'));
    $this->drupalPost('user/' . $this->unicef_user->uid . '/edit', array("roles[3]" => 3, 'taxonomy_vocabulary_5[und]' => 30, 'taxonomy_vocabulary_4[und]' => 26, 'field_user_firstname[und][0][value]' => 'firstname', 'field_user_surname[und][0][value]' => 'lname', 'field_user_aboutme[und][0][value]' => 'aboutjan', 'name' =>'tester', 'field_user_superior[und][0][target_id]' => 'Jan van Diepen (3)'), t('Save'));
     
    }

 public function testAdminEditsAbouttDevtractest() {
   $this->drupalGet('node/47/edit');
    //$this->drupalPost(NULL, $edit, t('Save'));
 
  
}


 public function testAboutDevtracEditSumarysuccessFieldExisttest() {
   $this->drupalGet('node/47/edit');
   $this->assertField('edit-body-und-0-summary', t('Field edit sumary does exist'), 'DevTrac');
   $this->assertText(t('Summary'), t('Summary label is showing'), 'DevTrac');
   $this->assertText(t('Edit Page About Devtrac'), t('Edit Page About Devtrac text exists'), 'DevTrac');
   $this->assertNoLink(t('Hide summary'), 0 ,t('Link to Hide summary found')); 
 }
 //
 public function testAboutDevtracTitleFieldsuccessExisttest() {
 	 $this->drupalGet('node/47/edit');
   $this->assertField('title', t('Field title does exist'), 'DevTrac');
   $this->assertText(t('Title'), t('Title label is showing'), 'DevTrac');
   $this->assertText(t('Edit Page About Devtrac'), t('Edit Page About Devtrac text exists'), 'DevTrac');
 
 }
 //
 
  public function testAboutDevtracBodyFieldsuccessExisttest() {
    $this->drupalGet('node/47/edit');
    $this->assertField('body[und][0][value]', t('Field body does exist'), 'DevTrac');
    $this->assertText(t('Body'), t('Body label is showing'), 'DevTrac');
    $this->assertText(t('Edit Page About Devtrac'), t('Edit Page About Devtrac text exists'), 'DevTrac');
 }
  public function testAboutDevtracPreviewChangesFieldsuccessExisttest() {
   $this->drupalGet('node/47/edit');
   $this->assertField('edit-delete', t('Button delete is showing does exist'), 'DevTrac');
   $this->assertText(t('Edit Page About Devtrac'), t('Edit Page About Devtrac text exists'), 'DevTrac');
 }
 //
  public function testAboutDevtracPreviewFieldsuccessExisttest() {
  	$this->drupalGet('node/47/edit');
   $this->assertField('edit-delete', t('Button delete is showing does exist'), 'DevTrac');
   $this->assertNoField('edit-preview', t('Button Preview is showing'), 'DevTrac');
   $this->assertText(t('Edit Page About Devtrac'), t('Edit Page About Devtrac text exists'), 'DevTrac');
 }
 
 
   public function testAboutDevtracSubmitFieldsuccessExisttest() {
   $this->drupalGet('node/47/edit');
   $this->assertField('edit-submit', t('Button submit does exist'), 'DevTrac');
   $this->assertText(t('Edit Page About Devtrac'), t('Edit Page About Devtrac text exists'), 'DevTrac');
 }
 //
 public function testAboutDevtracEditLinkssuccessExisttest() {
   $this->drupalGet('node/47/edit');
   $this->assertText(t('Real time reporting on public services in Uganda'), t('Devtrac description found on the index page'), 'Devtrac');
   $this->assertLink(t('Statistics'), 0 ,t('Link to site statistics found'));
   $this->assertLink(t('Site Reports'), 0 ,t('Link to site reports found'));
   $this->assertLink(t('Contact Us'), 0 ,t('Link to site reports found'));
 }
 // now that the fields are well teststed, the real editing functionality ids the next on the agenda!
 
 public function testAboutDevtracEditTextInTitleExisttest() {
   $this->drupalGet('node/47/edit');
   $title['title'] = 'testing the title';
   $this->assertText(t('Real time reporting on public services in Uganda'), t('Devtrac description found on the index page'), 'Devtrac');
   $this->drupalPost(NULL, $title, t('Save'));
   $this->assertText(t('has been updated.'), t('Title has been edited'), 'DevTrac');
 }
 // now heading to the edited titled page
 
 public function testAboutDevtracEditNewTitleExisttest() {
   $this->drupalGet('node/47/edit');
   $this->assertNoText(t('testing the title'), t('Devtrac description found on the index page'), 'Devtrac');
   $this->assertNoText(t('has been updated.'), t('Title has been edited'), 'DevTrac');
   $this->assertNoRaw('<h1 id="page-title" class="title">' . t('testing the title')  . '</h1>');
 }
 //what happens when one press the preview button
 
  public function testAboutDevtracEditPreviewPressedExisttest() {
  	$this->drupalGet('node/47/edit');
    $this->assertText(t('Real time reporting on public services in Uganda'), t('Devtrac description found on the index page'), 'Devtrac');
    $this->drupalPost('node/47/edit', array('title' => $this->randomName(8)), t('Save'));//it was preview button and removed
    $this->assertNoText(t('The trimmed version of your post shows what your post looks like when promoted to the main page or when exported for syndication.'), t('Notification is not showing showing on preview'), 'DevTrac');
 }
 

 
 
 
 
 }
