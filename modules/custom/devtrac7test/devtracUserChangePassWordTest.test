<?php

/**
 * @file
 * Testing the behaviors of a user profile edit.
 **/

module_load_include('test', 'simpletest_clone');

class CustomUserProfileEditCahngeTestCase extends SimpleTestCloneTestCase {
  protected $admin_user;
  public static function getInfo() {
    return array(
      'name' => 'DevTrac7 User profile edit Test',
      'description' => t('Testing the edit user profile process.'),
      'group' => 'Devtrac',
    );
  }  

  
  /**
   * (non-PHPdoc)
   * @see SimpleTestCloneTestCase::setUp()
   *
   * 1. Create a new User with all permissions of role "Unicef" (rid = 5).
   * 2. Log the user into the system.
   */
  /**
   * Log in a user with the internal browser.
   *
   * If a user is already logged in, then the current user is logged out before
   * logging in the specified user.
   *
   * Please note that neither the global $user nor the passed in user object is
   * populated with data of the logged in user. If you need full access to the
   * user object after logging in, it must be updated manually. If you also need
   * access to the plain-text password of the user (set by drupalCreateUser()),
   * e.g. to login the same user again, then it must be re-assigned manually.
   * For example:
   * @code
   *   // Create a user.
   *   $account = $this->drupalCreateUser(array());
   *   $this->drupalLogin($account);
   *   // Load real user object.
   *   $pass_raw = $account->pass_raw;
   *   $account = user_load($account->uid);
   *   $account->pass_raw = $pass_raw;
   * @endcode
   *
   * @param $user
   *   User object representing the user to login.
   *
   * @see drupalCreateUser()
   */
  protected function drupalLogin(stdClass $user) {
  	if ($this->loggedInUser) {
  		$this->drupalLogout();
  	}
  
  	$edit = array(
  			'name' => $user->name,
  			'pass' => $user->pass_raw
  	);
  	$this->drupalPost('user', $edit, t('Log in'));
  
  	// If a "log out" link appears on the page, it is almost certainly because
  	// the login was successful.
  	$pass = $this->assertLink(t('Sign out'), 0, t('User %name successfully logged in.', array('%name' => $edit['name'])), t('User login'));
  
  	if ($pass) {
  		$this->loggedInUser = $user;
  	}
  }
 
  
 public function setUp() {
   parent::setUp();
   
   $this->admin_user = $this->drupalCreateUser(array('administer users', 'administer permissions', 'access user profiles', 'administer site configuration', 'administer modules'));
   //$this->authenticated_user = $this->drupalCreateUser();
   $this->drupalLogin($this->admin_user);
  }
  //establishing that all form elements are available.
  
  public function testUsernameFieldExisttest() {
  	$this->drupalGet('user/' . $this->admin_user->uid . '/edit');
  	$this->assertField('field_user_firstname[und][0][value]', t('Firstname field shows'), 'Devtrac');
    $this->assertText(t('First Name'), t('Found First Name field'), 'Devtrac');
  }
  public function testCurrentPasswordExisttest() {
  	$this->drupalGet('user/' . $this->admin_user->uid . '/edit');
  	$this->assertField('current_pass', t('Current password field shows'), 'Devtrac');
  	$this->assertText(t('Current password'), t('Found the current password field'), 'Devtrac');
  }
  
  public function testConfirmPasswordFieldExisttest() {
  	$this->drupalGet('user/' . $this->admin_user->uid . '/edit');
  	$this->assertField('pass[pass2]', t('Confirm password field shows'), 'Devtrac');
  	$this->assertText(t('Confirm password'), t('Found confirm password field'), 'Devtrac');
  }
  
  public function testPasswordFieldExisttest() {
  	$this->drupalGet('user/' . $this->admin_user->uid . '/edit');
  	$this->assertField('pass[pass1]', t('Password field shows'), 'Devtrac');
  	$this->assertText(t('Password'), t('Found password field'), 'Devtrac');
  }
  
  
  public function testContactButtonExisttest() {
  	$this->drupalGet('user/' . $this->admin_user->uid . '/edit');
  	$this->assertField('contact', t('Contact button shows'), 'Devtrac');
  	$this->assertText(t('Personal contact form'), t('Found contact button'), 'Devtrac');
  }
  
  public function testAboutMeFieldExisttest() {
  	$this->drupalGet('user/' . $this->admin_user->uid . '/edit');
  	$this->assertField('field_user_aboutme[und][0][value]', t('About me field shows'), 'Devtrac');
  	$this->assertText(t('About Me'), t('Found About Me field'), 'Devtrac');
  }
  
  public function testEmailFieldExisttest() {
  	$this->drupalGet('user/' . $this->admin_user->uid . '/edit');
  	$this->assertField('mail', t('E-mail address field shows'), 'Devtrac');
  	$this->assertText(t('E-mail address'), t('Found E-mail address field'), 'Devtrac');
  }
  
  public function testPictureUploadFieldExisttest() {
  	$this->drupalGet('user/' . $this->admin_user->uid . '/edit');
  	$this->assertField('files[picture_upload]', t('Upload picture field shows'), 'Devtrac');
  	$this->assertText(t('Upload picture'), t('Found picture upload field'), 'Devtrac');
  }
  
  
  public function testTitleFieldExisttest() {
  	
  	$this->drupalGet('user/' . $this->admin_user->uid . '/edit');
  	$this->assertField('field_user_title[und][0][value]', t('Title Field found on the form'), 'Devtrac');
  	$this->assertText(t('Title'), t('Found Title field'), 'Devtrac');
  	
  }
  
  public function testAcademicDegreeFieldExisttest() {
  	$this->drupalGet('user/' . $this->admin_user->uid . '/edit');
  	$this->assertText(t('Work Information'), t('Found Work Information section'), 'Devtrac');
  	$this->assertField('field_user_degree[und][0][value]', t('Academi degrees field shows'), 'Devtrac');
  	$this->assertText(t('Academic Degree(s)'), t('Found Academic Degrees field'), 'Devtrac');
  }
  
    public function testSurnameFieldExisttest() {
  	$this->drupalGet('user/' . $this->admin_user->uid . '/edit');
  	$this->assertField('field_user_surname[und][0][value]', t('Surnamefield shows'), 'Devtrac');
  	$this->assertText(t('Surname'), t('Found Surname field'), 'Devtrac');
  }
  //
  public function testFunctionFieldExisttest() {
  	$this->drupalGet('user/' . $this->admin_user->uid . '/edit');
  	$this->assertField('taxonomy_vocabulary_5[und]', t('Function field shows'), 'Devtrac');
  	$this->assertText(t('Function'), t('Found Function field label'), 'Devtrac');
  }
  
  
  public function testManagerFieldExisttest() {
  	$this->drupalGet('user/' . $this->admin_user->uid . '/edit');
  	$this->assertField('field_user_superior[und][0][target_id]', t('Manager field shows'), 'Devtrac');
  	$this->assertText(t('Manager'), t('Found Manager field'), 'Devtrac');
  }
  //department field is  not showing because it's just filtered(not showing on the page)
  public function testDeparmentFieldExisttest() {
  	$this->drupalGet('user/' . $this->admin_user->uid . '/edit');
  	$this->assertField('taxonomy_vocabulary_4[und]', t('Department field shows'), 'Devtrac');
  	$this->assertText(t('Department'), t('Found department field'), 'Devtrac');
  }
  /**
   * now that the fields are comfirmed (all available )
   * Heading to use case (editting) scenerios.
   * 
   * 
   */
  
  
  public function testProfileEditInvalidUsernameEnChange() {
  	//User edits some fields and leaves surname and first name fields unfilled. 
  	$this->drupalPost('user/' . $this->admin_user->uid . '/edit', array('pass[pass1]' => 'first', 'pass[pass2]' => 'first', 'field_user_aboutme[und][0][value]' => 'aboutjan', 'current_pass' => $this->admin_user->pass), t('Save'));
    $this->assertText(t('First Name field is required.'), t('First Name field is required.Left empty'), 'Devtrac');
    $this->assertText(t('Surname field is required.'), t('Surname field is required.Left empty'), 'Devtrac');
     
  }  
   
    /**
   * 
   * user now edits and leaves current password field empty. not recognized. 
   * 
   * 
   */
  public function testProfileEditCurrentPassEmptyChange() {
    $this->drupalPost('user/' . $this->admin_user->uid . '/edit', array('pass[pass1]' => 'first', 'pass[pass2]' => 'first', 'field_user_aboutme[und][0][value]' => 'aboutjan', 'current_pass' => $this->admin_user->pass, 'mail' => 'test@gmail.com', 'field_user_surname[und][0][value]' => 'osmay', 'field_user_firstname[und][0][value]' => 'paulo'), t('Save'));
    $this->assertText(t('Your current password is missing or incorrect;'), t('Surname field is required.Left empty'), 'Devtrac');
  }  
  
   /**
   * 
   * user tries to submit edited profile but puts more than requires values in the about user field. 
   * 
   * 
   */
  
  
   public function testProfileEditAboutUsFieldValuesExceedsMaximumChange() {
  	
    $this->drupalPost('user/' . $this->admin_user->uid . '/edit', array('current_pass' => $this->admin_user->pass, 'pass[pass1]' => 'first1', 'pass[pass2]' => 'first1', 'field_user_aboutme[und][0][value]' => $this->randomName(312), 'mail' => 'test@gmail.com', 'field_user_surname[und][0][value]' => 'osmay', 'field_user_firstname[und][0][value]' => 'paulo'), t('Save'));
    $this->assertText(t('Your current password is missing or incorrect;'), t('About user field values exceeds maximum'), 'Devtrac');
     
   }  
  
  public function testProfileEditPasswordNotMatchingChange() {
  	
   $this->drupalPost('user/' . $this->admin_user->uid . '/edit', array('current_pass' => $this->admin_user->pass, 'pass[pass1]' => 'first1', 'pass[pass2]' => 'first', 'field_user_aboutme[und][0][value]' => $this->randomName(312), 'mail' => 'test@gmail.com', 'field_user_surname[und][0][value]' => 'osmay', 'field_user_firstname[und][0][value]' => 'paulo'), t('Save'));
    $this->assertText(t('About Me cannot be longer than 300 characters but is currently 312 characters long.'), t('About Me cannot be longer than 300 characters but is currently 312 characters long.'), 'Devtrac');
  }  
  /**
   * User entempts to upload an image but the image is supposed to have a known image extensions 
   * and retrieving hashed password.
   * the image should be resized to the required 1000x1000 pixels.
   */
  public function testProfileImageUpLoad() {
  	
    $this->drupalPost('user/' . $this->admin_user->uid . '/edit', array('taxonomy_vocabulary_4[und]' => 26, 'taxonomy_vocabulary_5[und]' => 31, 'current_pass' => $this->admin_user->pass, 'pass[pass1]' => 'first', 'pass[pass2]' => 'first', 'field_user_aboutme[und][0][value]' => $this->randomName(12), 'mail' => 'test@gmail.com', 'field_user_surname[und][0][value]' => 'osmay', 'field_user_firstname[und][0][value]' => 'paulo', 'files[picture_upload]' => 'sites/default/themes/devtrac7_theme/images/panda'), t('Save'));
    $this->assertText(t('The specified file panda. could not be uploaded. Only files with the following extensions are allowed: jpg jpeg gif png txt doc xls pdf ppt pps odt ods odp.'), t('The specified file panda. could not be uploaded. It doesnt have the known image extensions'), 'Devtrac');
    $this->assertText(t('For security reasons, your upload has been renamed to panda..'), t('For security reasons, User upload has been renamed to panda..'), 'Devtrac'); 
    $this->assertText(t('The image was resized to fit within the maximum allowed dimensions of 1000x1000 pixels.'), t('The image was resized to fit within the maximum allowed dimensions of 1000x1000 pixels.'), 'Devtrac');
     
   }  
  
  /**
   * User successfully uploads the image.
   * but still retrieving hashed password
   * The image is resized to the required 1000x1000 pixels.
   */
  
  
   public function testProfileImageUploadDone() {
  	
    $this->drupalPost('user/' . $this->admin_user->uid . '/edit', array('current_pass' => $this->admin_user->pass, 'pass[pass1]' => 'first', 'pass[pass2]' => 'first', 'field_user_aboutme[und][0][value]' => $this->randomName(12), 'mail' => 'test@gmail.com', 'field_user_surname[und][0][value]' => 'osmay', 'field_user_firstname[und][0][value]' => 'paulo', 'files[picture_upload]' => 'sites/default/themes/devtrac7_theme/images/ws_pandas_in_love_1920x1200.jpg'), t('Save'));
    $this->assertText(t('The image was resized to fit within the maximum allowed dimensions of 1000x1000 pixels.'), t('The image was resized to fit within the maximum allowed dimensions of 1000x1000 pixels.'), 'Devtrac');
     
   }  
  
   /**
   * User successfully updates his profile with 
   * image uproaded and 
   * The image is resized to the required 1000x1000 pixels.
   */
  
  
  public function testProfileEditNotSuccessfullyDone() {
    $this->drupalPost('user/' . $this->admin_user->uid . '/edit', array('taxonomy_vocabulary_4[und]' => 26, 'taxonomy_vocabulary_5[und]' => 31, 'current_pass' => $this->admin_user->pass_raw, 'pass[pass1]' => 'first', 'pass[pass2]' => 'first', 'field_user_aboutme[und][0][value]' => $this->randomName(12), 'mail' => 'test@gmail.com', 'field_user_surname[und][0][value]' => 'osmay', 'field_user_firstname[und][0][value]' => 'paulo', 'files[picture_upload]' => 'sites/default/themes/devtrac7_theme/images/ws_pandas_in_love_1920x1200.jpg'), t('Save'));
    $this->assertText(t('The image was resized to fit within the maximum allowed dimensions of 1000x1000 pixels.'), t('The image was resized to fit within the maximum allowed dimensions of 1000x1000 pixels.'), 'Devtrac');
    $this->assertNoText(t('The changes have been saved'), t('User finished editting his/her profile and changed are not saved, use failed to set manager field'), 'Devtrac');
    } 
     
  public function testProfileEditSuccessfullyDone(){
  	$this->drupalPost('user/' . $this->admin_user->uid . '/edit', array('current_pass' => '$this->admin_user->pass_raw', 'pass[pass1]' => 'first', 'pass[pass2]' => 'first', 'field_user_aboutme[und][0][value]' => $this->randomName(12), 'mail' => 'test@gmail.com','field_user_superior[und][0][target_id]' => 'Jan van Diepen (3)', 'field_user_surname[und][0][value]' => 'osmay', 'field_user_firstname[und][0][value]' => 'paulo', 'files[picture_upload]' => 'sites/default/themes/devtrac7_theme/images/ws_pandas_in_love_1920x1200.jpg'), t('Save'));
  	$this->assertText(t('The image was resized to fit within the maximum allowed dimensions of 1000x1000 pixels.'), t('The image was resized to fit within the maximum allowed dimensions of 1000x1000 pixels.'), 'Devtrac');
  	$this->assertText(t('Your current password is missing or incorrect;'), t('User Your current password is missing or incorrect'), 'Devtrac');
  }

  } 
