<?php

/**
 * @file
 * Handles routing to list and retrieve package metadata.
 */

/** @mainpage CKAN API
 * 
 * If your website has any data available that should be shared on a CKAN/DKAN based 
 * open data platform and you do not want to write a full API on your Drupal website
 * then this API module can help you.
 * 
 * This module will implement the part of the CKAN API that is needed to harvest 
 * the metadata of your (csv) datasets by any remote CKAN/DKAN installation.
 * 
 * Once CKAN knows the URL of your CSV datasources, it can even harvest your data
 * using the @link http://docs.ckan.org/projects/datapusher/en/latest/ datapusher @endlink. At that point your users can use the CKAN datastore API
 * to retrieve your data, and you dont have to build an API anymore.
 * 
 * So, by implementing the @link http://docs.ckan.org/en/latest/api/legacy-api.html CKAN API 2.0@endlink
 * CKAN is able to harvest Drupal data as datasets. The @link https://github.com/ckan/ckanext-harvest CKAN Harvester @endlink
 * extention is depending on the legacy V2 of the API. This module has no aspiration
 * to implement the V3 version of the CKAN API.
 * 
 * Consecutive data queries into your data can then
 * be done through the @link http://docs.ckan.org/en/latest/maintaining/datastore.html#the-datastore-api CKAN Datastore API@endlink
 */

/**
 * Implements hook_services_resources()
 * 
 * Returns the only 2 calls/endpoints on the full CKAN API that is implemented
 * dataset for retrieving an individual dataset and index to retrieve a list
 * of datasets.
 */
function ckan_packages_services_resources() {
  return array(
    'dataset' => array(
      'retrieve' => array(
        'help' => 'Retrieves a package',
        'file' => array('file' => 'inc', 'module' => 'ckan_packages'),
        'callback' => 'ckan_packages_retrieve',
        'access callback' => '_ckan_packages_access',
        'access arguments' => array('view'),
        'access arguments append' => TRUE,
        'args' => array(
          array(
            'name' => 'id',
            'type' => 'string',
            'description' => 'The id of the resource to get',
            'source' => array('path' => '0'),
            'optional' => FALSE,
          ),
        ),
      ),
      'index' => array(
        'help' => 'Packages list',
        'file' => array('file' => 'inc', 'module' => 'ckan_packages'),
        'callback' => 'ckan_packages_list',
        'access callback' => '_ckan_packages_access',
        'access arguments' => array('list'),
        'access arguments append' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ckan_packages_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array(
      'version' => 3,
      'file' => 'ckan_packages.inc',
      'path' => drupal_get_path('module', 'ckan_packages'),
    );
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function ckan_packages_ctools_plugin_type() {
  return array(
    'packages' => array(
      'classes' => array('handler'),
      'use hooks' => TRUE,
    ),
  );
}

/**
 * Access callback.
 */
function _ckan_packages_access($op, $args = array()) {
  // @todo
  return TRUE;
}

/**
 * Internal function to retrieve lists, or individual plugins.
 */
function _ckan_packages_get_plugin($name, $id) {
  static $cache = array();

  if (!$id || !isset($cache[$name][$id])) {
    ctools_include('plugins');
    $plugins = ctools_get_plugins('ckan_packages', $name);
    foreach ($plugins as $key => $plugin) {
      if (empty($plugin['hidden'])) {
        $handler = ctools_plugin_get_class($plugin, 'handler');
        $cache[$name][$key] = new $handler();
      }
    }
  }

  if ($id) {
    return isset($cache[$name][$id]) ? $cache[$name][$id] : NULL;
  }
  else {
    return isset($cache[$name]) ? $cache[$name] : NULL;
  }
}
